name: Sync an existing S3 bucket to a composed bucket
description: Sync an existing S3 bucket to a composed bucket
author: Denis Trofimov denis.trofimov@huma.com
branding:
  color: "orange"
  icon: "hard-drive"
inputs:
  project_id:
    description: GCP project ID
    required: true
  gcp_credentials:
    description: GCP Service Account Key
    required: true
  source_bucket:
    description: Source S3 bucket name
    required: true
  aws_access_key_id:
    description: AWS access key ID
    required: true
  aws_secret_access_key:
    description: AWS access key secret
    required: true
  aws_region:
    description: AWS region
    required: true
  cluster_name:
    description: GKE cluster name
    required: true
  location:
    description: GKE zone
    required: true
  secret_name:
    description: name of bucket secret
    required: true
  app_namespace:
    description: Namespace
    required: true
outputs:
  error:
    description: action's exit code
    value: ${{ steps.result.outputs.error }}
runs:
  using: composite
  steps:
    - name: Setup gcloud CLI bucket
      uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_key: ${{ inputs.gcp_credentials }}
        project_id: ${{ inputs.project_id }}

    - name: Get the GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ inputs.cluster_name }}
        location: ${{ inputs.location }}
        credentials: ${{ inputs.gcp_credentials }}

    - name: Check bucket's secret exist
      id: secret
      env:
        secret_name: ${{ inputs.secret_name }}
        namespace: ${{ inputs.app_namespace }}
      run: |
        ${{ github.action_path }}/check-k8s-secret-exist.sh && error=0 || error=$?
        echo "::set-output name=error::$error"
      shell: bash

    - name: Read AWS S3 bucket connection secret from K8s cluster
      id: readSecret
      if: steps.secret.output.error == 0
      run: |-
        error=0
        id=$(kubectl get -n ${{ inputs.app_namespace }} secrets/${{ inputs.secret_name }} \
          --template={{.data.aws_access_key_id}} | base64 --decode) || error=$?
        secret=$(kubectl get -n ${{ inputs.app_namespace }} secrets/${{ inputs.secret_name }} \
          --template={{.data.aws_secret_access_key}} | base64 --decode) || error=$?
        s3_bucket=$(kubectl get -n ${{ inputs.app_namespace }} secrets/${{ inputs.secret_name }} \
          --template={{.data.bucket_name}} | base64 --decode) || error=$?
        region=$(kubectl get -n ${{ inputs.app_namespace }} secrets/${{ inputs.secret_name }} \
          --template={{.data.region}} | base64 --decode) || error=$?
        echo "::add-mask::$id"
        echo "::add-mask::$secret"
        echo "::set-output name=id::$id"
        echo "::set-output name=secret::$secret"
        echo "::set-output name=s3_bucket::$s3_bucket"
        echo "::set-output name=region::$region"
        echo "::set-output name=error::$error"
      shell: bash

    - name: Configure AWS Credentials
      if: steps.secret.output.error == 0 && steps.readSecret.output.error == 0
      run: |-
        mkdir -p ~/.aws
        cat > ~/.aws/credentials << EOF
        [default]
        aws_access_key_id=${{ inputs.aws_access_key_id }}
        aws_secret_access_key=${{ inputs.aws_secret_access_key }}
        region=${{ inputs.aws_region }}
        EOF
      shell: bash

    - name: Sync an existing S3 bucket to a composed bucket
      id: sync
      if: steps.secret.output.error == 0 && steps.readSecret.output.error == 0
      env:
        target_bucket: ${{ steps.readSecret.outputs.s3_bucket }}
        source_bucket: ${{ inputs.source_bucket }}
      run: |
        aws configure set default.s3.max_concurrent_requests 50 && error=0 || error=$?
        echo "uploading each item from the bucket s3://${source_bucket} to the bucket s3://${target_bucket}"
        aws s3 sync --delete --only-show-errors s3://${source_bucket} s3://${target_bucket} && error=0 || error=$?
        echo "::set-output name=error::$error"
      shell: bash

    - name: Post Configure AWS Credentials clean up
      if: steps.secret.output.error == 0 && steps.readSecret.output.error == 0
      run: rm ~/.aws/credentials
      shell: bash

    - name: result
      id: result
      run: |
        for r in ${{ steps.secret.output.error }} ${{ steps.readSecret.output.error }} \
          ${{ steps.sync.output.error }}
        do 
          error=$r && [ $error != 0 ] && break
        done
        echo "::set-output name=error::$error"
      shell: bash
