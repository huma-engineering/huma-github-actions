name: Dump MongoDB database to a GCS bucket
author: Denis Trofimov denis.trofimov@huma.com
description: Dump MongoDB database to a GCS bucket
branding:
  color: 'green'
  icon: 'database'
inputs:
  archive_name:
    description: Archive name
    required: true
  bucket_name:
    description: Bucket name
    required: true
  project_id:
    description: GCP project ID
    required: true
  db_uri:
    description: MongoDB URI
    required: true
  gcp_credentials:
    description: GCP Service Account Key
    required: true
  vpn_username:
    description: VPN user name
    required: true
  vpn_password:
    description: VPN password
    required: true
  vpn_config_url:
    description: URL to download a VPN config file
    required: true
  vpn_check_internal_domain:
    description: An internal domain to check that VPN is connected
    default: ''
    required: false

runs:
  using: composite
  steps:
    # vpn
    - name: Install Open VPN
      run: |
        sudo apt update
        sudo apt install -y openvpn openvpn-systemd-resolved
      shell: bash
    - name: Open VPN Config download
      run: |
        curl -s ${{ inputs.vpn_config_url }} -o openvpn-config.ovpn
      shell: bash
    - name: Connect VPN
      uses: "kota65535/github-openvpn-connect-action@v1"
      with:
        config_file: ./openvpn-config.ovpn
        username: ${{ inputs.vpn_username }}
        password: ${{ inputs.vpn_password }}

    - name: Wait for a VPN connection
      if: inputs.vpn_check_internal_fqdn != ''
      run: |-
        until dig localhost ${{ inputs.vpn_check_internal_fqdn }} A +time=1; \
        do sleep 5; \
        done
      shell: bash

    - name: Check IP
      run: curl ifconfig.me
      shell: bash

    - name: Dump a database to a file
      run: |-
        mongodump --uri=${{ inputs.db_uri }} \
          --archive=${{ inputs.archive_name }} \
          --gzip -v \
          --forceTableScan \
          --excludeCollection=deploymentrevision --excludeCollection=auditlog
      shell: bash

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_key: ${{ inputs.gcp_credentials }}
        project_id: ${{ inputs.project_id }}

    - name: Upload to a bucket
      run: gsutil cp ${{ inputs.archive_name }} gs://${{ inputs.bucket_name }}
      shell: bash
