name: Restore MongoDB archived DB
description: Restore MongoDB archived DB
author: Denis Trofimov denis.trofimov@huma.com
branding:
  color: 'green'
  icon: 'database'
inputs:
  project_id:
    description: GCP project ID
    required: true
  cluster_name:
    description: GKE cluster name
    required: true
  location:
    description: GKE zone
    required: true
  app_namespace:
    description: Namespace
    required: true
  bucket_name:
    description: Bucket name
    required: true
  db_namespace:
    description: MongoDB Cluster Namespace
    default: kubedb
    required: false
  db_service:
    description: DB service name
    required: true
  db_user:
    description: DB user's name
    required: true
  source_db_name:
    description: DB name of the source
    required: true
  gcp_credentials:
    description: GCP Service Account Key
    required: true
outputs:
  error:
    description: action's exit code
    value: ${{ steps.result.outputs.error }}

runs:
  using: composite
  steps:
    # ref: https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/
    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_key: ${{ inputs.gcp_credentials }}
        project_id: ${{ inputs.project_id }}

    - name: Get GKE cluster credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ inputs.cluster_name }}
        location: ${{ inputs.location }}
        credentials: ${{ inputs.gcp_credentials }}

    - name: Download an object from a bucket
      id: download
      env:
        dump_name: dump_hs_sandbox_${{ inputs.source_db_name }}.gz
      run: |
        gsutil cp gs://${{ inputs.bucket_name }}/${{ env.dump_name }} . && error=0 || error=$?
        echo "::set-output name=error::$error"
      shell: bash

    - name: Check that MongoDB pod is running
      id: pod
      if: steps.download.output.error == 0
      env:
        pod: ${{ inputs.db_service }}
        namespace: ${{ inputs.db_namespace }}
      run: |
        ${{ github.action_path }}/check-k8s-pod-running.sh && error=0 || error=$?
        echo "::set-output name=error::$error"
      shell: bash

    - name: Check that MongoDBUser's secret exist
      id: secret
      if: steps.download.output.error == 0 && steps.pod.output.error == 0
      env:
        secret_name: ${{ inputs.db_user }}
        namespace: ${{ inputs.app_namespace }}
      run: |
        ${{ github.action_path }}/check-k8s-secret-exist.sh && error=0 || error=$?
        echo "::set-output name=error::$error"
      shell: bash

    - name: Restore a MongoDB dump from an archive
      id: restore
      if: ${{ steps.download.output.error == 0 && steps.pod.output.error == 0 
        && steps.secret.output.error == 0 }}
      env:
        source_db_name: ${{ inputs.source_db_name }}
        db_user: ${{ inputs.db_user }}
        app_namespace: ${{ inputs.app_namespace }}
        db_service: ${{ inputs.db_service }}
        db_namespace: ${{ inputs.db_namespace }}
      run: |
        ${{ github.action_path }}/restore-mongodb-archived-db.sh && error=0 || error=$?
        echo "::set-output name=error::$error"
      shell: bash

    - name: result
      id: result
      run: |
        for r in ${{ steps.download.output.error }} ${{ steps.pod.output.error }} \
          ${{ steps.secret.output.error }} ${{ steps.restore.output.error }}
        do 
          error=$r && [ $error != 0 ] && break
        done
        echo "::set-output name=error::$error"
      shell: bash
